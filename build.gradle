import com.github.spotbugs.SpotBugsTask

plugins {
    id 'com.github.spotbugs' version '1.6.2'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'org.ajoberstar.grgit' version '2.3.0'
    id 'org.sonarqube' version '2.6.2'
}
apply plugin: 'org.ajoberstar.grgit'

allprojects {
    repositories {
        jcenter()                               // JDA, maybe others
        mavenCentral()                          // everything else
        mavenLocal()                            // local maven repo, mostly for testing stuff
        maven { url 'https://jitpack.io' }      // for getting builds from github
    }

    apply plugin: 'idea'

    ext {
        gradleVers = '4.7'
    }

    group = 'space.npstr.SqlSauce'
    version = "${getMyVersion()}"
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = 8
    targetCompatibility = 8

    compileJava.dependsOn clean
    compileJava.options.encoding = 'UTF-8'
    compileJava.options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'

    jar.mustRunAfter clean
    jar.dependsOn spotbugsMain

    publishToMavenLocal.dependsOn jar

    task install {
        dependsOn publishToMavenLocal
    }

    build {
        dependsOn install
        dependsOn test
    }

    task pub {
        dependsOn install
        dependsOn bintrayUpload
        bintrayUpload.mustRunAfter(install)
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }

    test {
        useJUnitPlatform()
    }

    // To generate an HTML report instead of XML
    tasks.withType(SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    configurations {
        // Make the compileOnly dependencies available when compiling/running tests
        testCompile.extendsFrom compileOnly
    }

    ext {
        jpaVersion = '2.2'
        postgresDriverVersion = '42.2.2'
        hibernateVersion = '5.2.17.Final'
        hikariVersion = '3.2.0'
        hibTypesVersion = '2.2.2'
        guavaVersion = '25.1-jre'

        dsProxyVersion = '1.4.8'
        flywayVersion = '5.0.7'

        jaxbApiVersion = '2.3.0'
        slf4jApiVersion = '1.7.25'
        annotationsVersion = '0.0.1'
        spotbugsVersion = '3.1.3'
        prometheusVersion = '0.3.0'

        //discord entities module
        jdaVersion = '3.6.0_359'

        //notifications module
        jsonOrgVersion = '20180130'

        //testing
        jUnitVersion = '5.1.1'
        apiGuardianVersion = '1.0.0'
        logbackVersion = '1.2.3'
    }

    dependencies { //for each module
        compile group: 'javax.persistence', name: 'javax.persistence-api', version: jpaVersion

        //optional various/QA deps
        compileOnly group: 'org.slf4j', name: 'slf4j-api', version: slf4jApiVersion   //logging framework
        compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsVersion //annotations
        compileOnly group: 'space.npstr', name: 'annotations', version: annotationsVersion //advanced annotations

        //testing
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion
        testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion
        // To avoid compiler warnings about @API annotations in JUnit code.
        testCompileOnly group: 'org.apiguardian', name: 'apiguardian-api', version: apiGuardianVersion

        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    }

    def pomConfig = {
        licenses {
            license {
                name "MIT License"
                url "https://opensource.org/licenses/MIT"
                distribution "repo"
            }
        }
        developers {
            developer {
                name "Napster"
                email "napster@npstr.space"
            }
        }
        scm {
            url "https://github.com/napstr/SqlSauce"
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar {
                    classifier "sources"
                }
                groupId project.group
                artifactId project.name
                version project.version
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'SQL tech stack on top of PostgreSQL, HikariCP, Hibernate')
                    root.appendNode('name', 'SqlSauce')
                    root.appendNode('url', 'https://github.com/napstr/SqlSauce')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        publications = ['mavenJava']
        filesSpec {
            from('build/libs')
            into '.'
        }
        dryRun = false
        publish = true
        override = true
        pkg {
            repo = 'SqlSauce'
            name = project.name
            userOrg = user
            licenses = ['MIT']
            vcsUrl = 'https://github.com/napstr/SqlSauce'
            version {
                name = project.version
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleVers
    //noinspection UnnecessaryQualifiedReference
    distributionType = Wrapper.DistributionType.ALL
}

//returns either a git tag if there is one on this commit in the form of MAJOR.MINOR.PATCH,
//or the last such tag with "-SNAPSHOT" appended.
@SuppressWarnings("GrMethodMayBeStatic")
String getMyVersion() {
    def matcher = /^([0-9]+\.[0-9]+\.[0-9]+)(.*)$/
    def match = ("${grgit.describe()}" =~ matcher)[0]

    //noinspection GroovyAssignabilityCheck
    def result = match[1]
    //noinspection GroovyAssignabilityCheck
    def dirty = match[2]

    if (dirty.length() > 0) {
        result += '-SNAPSHOT'
    }

    println("Version: " + result)
    return result
}
