import com.github.spotbugs.SpotBugsTask
import org.gradle.api.tasks.wrapper.Wrapper.DistributionType

buildscript {
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0-M1'
    }
}
plugins {
    id 'com.github.spotbugs' version '1.6.0'
    id 'com.jfrog.bintray' version '1.8.0'
    id 'org.ajoberstar.grgit' version '2.1.0'
}
apply plugin: 'org.ajoberstar.grgit'

allprojects {
    repositories {
        jcenter()                               // JDA, maybe others
        mavenCentral()                          // everything else
        mavenLocal()                            // local maven repo, mostly for testing stuff
        maven { url 'https://jitpack.io' }      // for getting builds from github
    }

    apply plugin: 'idea'

    ext {
        gradleVers = '4.4.1'
    }

    group = 'space.npstr.SqlSauce'
    version = "${getMyVersion()}"
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = 8
    targetCompatibility = 8

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId rootProject.group
                artifactId project.name

                from components.java

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }

    compileJava.dependsOn clean
    compileJava.options.encoding = 'UTF-8'
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

    jar.mustRunAfter clean
    jar.dependsOn spotbugsMain

    publishToMavenLocal.dependsOn jar

    task install {
        dependsOn publishToMavenLocal
        doLast {
            println "Version: " + version
        }
    }

    task pub {
        dependsOn install
        dependsOn test
        dependsOn bintrayUpload

        bintrayUpload.mustRunAfter install
        bintrayUpload.mustRunAfter test
        doLast {
            println "Version: " + version
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }

    // To generate an HTML report instead of XML
    tasks.withType(SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    ext {
        postgresDriverVersion = '42.2.0'
        hibernateVersion = '5.3.0.Beta1'
        hikariVersion = '2.7.6'
        jschVersion = '0.1.54'
        hibTypesVersion = '1.2.0'

        dsProxyVersion = '1.4.5'
        flywayVersion = '5.0.6'

        jaxbApiVersion = '2.3.0'
        slf4jApiVersion = '1.8.0-beta0'
        annotationsVersion = '0.0.1'
        spotbugsVersion = '3.1.1'
        prometheusVersion = '0.1.0'

        //discord entities module
        jdaVersion = '3.5.0_329'

        //testing
        jUnitVersion = '5.0.2'
        apiGuardianVersion = '1.0.0'
        logbackVersion = '1.3.0-alpha0'
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        filesSpec {
            from('build/libs')
            into '.'
        }
        dryRun = false
        publish = true
        pkg {
            repo = 'SqlSauce'
            name = project.name
            userOrg = user
            version {
                name = project.version
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleVers
    distributionType = DistributionType.ALL
}

//returns either a git tag if there is one on this commit, or the commit hash, to be used as a version
@SuppressWarnings("GrMethodMayBeStatic")
String getMyVersion() {

    def headTag = grgit.tag.list().find {
        it.commit == grgit.head()
    }

    if (headTag) {
        headTag.getName()
    } else {
        "${grgit.head().id}"
    }
}
